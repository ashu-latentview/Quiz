# -*- coding: utf-8 -*-
"""Quiz1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SYO1Adkr4AH4wtYzIqcN1wjpibHnLEZa
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

data=pd.read_csv('/content/DSAI-LVA-DATASET for Quiz.csv')

data.head()

data.info()

res=[]
for i in data['PreviousTestScore']:
  if i in range(90,101):
    res.append('HighPass')
  elif i in range(85,91):
    res.append('Pass')
  else:
    res.append('Fail')

data['res']=res

data.head()

data['ParentEducation'].value_counts()

temp = np.random.choice(['Masters', 'HighSchool', 'School','NotEducated'], size=200)

data['ParentEducation']=temp



data.head()

from sklearn.preprocessing import OneHotEncoder

one=OneHotEncoder()

data.head(10)



one.fit_transform(data[['ParentEducation']])

data=pd.get_dummies(data,columns=['ParentEducation'])



from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()

data['res']=le.fit_transform(data['res'])

data['target']=data['res']

data=data.drop(['res','Pass'],axis=1)

data.head()

from sklearn.model_selection import train_test_split

x=data.iloc[:,:-1]
y=data.iloc[:,-1]
print(x)

train,test=train_test_split(data,test_size=0.3,random_state=42)

train.to_csv('Train_data.csv')

test.to_csv('test_data.csv')

from sklearn.preprocessing import LabelEncoder
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.ensemble import AdaBoostClassifier, RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

classifiers = {
    'SVM': SVC(),
    'XGBoost': XGBClassifier(),
    'AdaBoost': AdaBoostClassifier(),
    'KNN': KNeighborsClassifier(),
    'RandomForest': RandomForestClassifier()
}

train_data=pd.read_csv('Train_data.csv')

x=train_data.iloc[:,:-1]
y=train_data.iloc[:,-1]

from sklearn.preprocessing import StandardScaler

sc=StandardScaler()

x=sc.fit_transform(x)

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

results = {}
for name, clf in classifiers.items():
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    results[name] = accuracy

# Printing accuracy of each classifier
for name, acc in results.items():
    print(f'{name}: {acc}')